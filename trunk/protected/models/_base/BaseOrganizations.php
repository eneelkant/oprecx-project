<?php

/**
 * This is the model base class for the table "{{organizations}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Organizations".
 *
 * Columns in table "{{organizations}}" available as properties of the model,
 * followed by relations of table "{{organizations}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $full_name
 * @property string $email
 * @property string $created
 * @property string $updated
 * @property string $description
 * @property string $type
 * @property string $scope
 * @property string $location
 * @property string $link
 * @property integer $img_id
 * @property string $reg_time_begin
 * @property string $reg_time_end
 * @property string $visibility
 *
 * @property Divisions[] $divisions
 * @property mixed $oprecxUsers
 * @property OrgElms[] $orgElms
 * @property OrganizationMetas[] $organizationMetases
 * @property Images $img
 */
abstract class BaseOrganizations extends CActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{organizations}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Organizations|Organizations', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, full_name, email, created, description, type, scope, location, link, reg_time_begin, reg_time_end', 'required'),
			array('img_id', 'numerical', 'integerOnly'=>true),
			array('name, full_name, email, type, scope, location, link, visibility', 'length', 'max'=>255),
			array('updated', 'safe'),
			array('updated, img_id, visibility', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, full_name, email, created, updated, description, type, scope, location, link, img_id, reg_time_begin, reg_time_end, visibility', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'divisions' => array(self::HAS_MANY, 'Divisions', 'org_id'),
			'oprecxUsers' => array(self::MANY_MANY, 'Users', '{{org_admins}}(org_id, user_id)'),
			'orgElms' => array(self::HAS_MANY, 'OrgElms', 'org_id'),
			'organizationMetases' => array(self::HAS_MANY, 'OrganizationMetas', 'org_id'),
			'img' => array(self::BELONGS_TO, 'Images', 'img_id'),
		);
	}

	public function pivotModels() {
		return array(
			'oprecxUsers' => 'OrgAdmins',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'full_name' => Yii::t('app', 'Full Name'),
			'email' => Yii::t('app', 'Email'),
			'created' => Yii::t('app', 'Created'),
			'updated' => Yii::t('app', 'Updated'),
			'description' => Yii::t('app', 'Description'),
			'type' => Yii::t('app', 'Type'),
			'scope' => Yii::t('app', 'Scope'),
			'location' => Yii::t('app', 'Location'),
			'link' => Yii::t('app', 'Link'),
			'img_id' => null,
			'reg_time_begin' => Yii::t('app', 'Reg Time Begin'),
			'reg_time_end' => Yii::t('app', 'Reg Time End'),
			'visibility' => Yii::t('app', 'Visibility'),
			'divisions' => null,
			'oprecxUsers' => null,
			'orgElms' => null,
			'organizationMetases' => null,
			'img' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('full_name', $this->full_name, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('updated', $this->updated, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('scope', $this->scope, true);
		$criteria->compare('location', $this->location, true);
		$criteria->compare('link', $this->link, true);
		$criteria->compare('img_id', $this->img_id);
		$criteria->compare('reg_time_begin', $this->reg_time_begin, true);
		$criteria->compare('reg_time_end', $this->reg_time_end, true);
		$criteria->compare('visibility', $this->visibility, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}