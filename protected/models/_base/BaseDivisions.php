<?php

/**
 * This is the model base class for the table "{{divisions}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Divisions".
 *
 * Columns in table "{{divisions}}" available as properties of the model,
 * followed by relations of table "{{divisions}}" available as properties of the model.
 *
 * @property integer $div_id
 * @property integer $org_id
 * @property string $name
 * @property string $description
 * @property string $leader
 * @property integer $max_applicant
 * @property integer $max_staff
 * @property integer $min_staff
 * @property integer $enabled
 * @property string $created
 * @property integer $weight
 *
 * @property mixed $oprecxUsers
 * @property mixed $oprecxOrgElms
 * @property Organizations $org
 */
abstract class BaseDivisions extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{divisions}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Divisions|Divisions', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('org_id, name, created', 'required'),
			array('org_id, max_applicant, max_staff, min_staff, enabled, weight', 'numerical', 'integerOnly'=>true),
			array('name, leader', 'length', 'max'=>255),
			array('description', 'safe'),
			array('description, leader, max_applicant, max_staff, min_staff, enabled, weight', 'default', 'setOnEmpty' => true, 'value' => null),
			array('div_id, org_id, name, description, leader, max_applicant, max_staff, min_staff, enabled, created, weight', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'oprecxUsers' => array(self::MANY_MANY, 'Users', '{{division_choices}}(div_id, user_id)'),
			'oprecxOrgElms' => array(self::MANY_MANY, 'OrgElms', '{{division_elms}}(div_id, elm_id)'),
			'org' => array(self::BELONGS_TO, 'Organizations', 'org_id'),
		);
	}

	public function pivotModels() {
		return array(
			'oprecxUsers' => 'DivisionChoices',
			'oprecxOrgElms' => 'DivisionElms',
		);
	}

	public function attributeLabels() {
		return array(
			'div_id' => Yii::t('app', 'Div'),
			'org_id' => null,
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'leader' => Yii::t('app', 'Leader'),
			'max_applicant' => Yii::t('app', 'Max Applicant'),
			'max_staff' => Yii::t('app', 'Max Staff'),
			'min_staff' => Yii::t('app', 'Min Staff'),
			'enabled' => Yii::t('app', 'Enabled'),
			'created' => Yii::t('app', 'Created'),
			'weight' => Yii::t('app', 'Weight'),
			'oprecxUsers' => null,
			'oprecxOrgElms' => null,
			'org' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('div_id', $this->div_id);
		$criteria->compare('org_id', $this->org_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('leader', $this->leader, true);
		$criteria->compare('max_applicant', $this->max_applicant);
		$criteria->compare('max_staff', $this->max_staff);
		$criteria->compare('min_staff', $this->min_staff);
		$criteria->compare('enabled', $this->enabled);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('weight', $this->weight);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}